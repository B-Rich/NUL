#!/usr/bin/perl -w

=head1 NAME

novaboot - NOVA boot script interpreter

=head1 SYNOPSIS

B<novaboot> [ --help ] [ --append=... ] [ --server ]  [ --grub ] [ --serial ] [ --dump-config ]

=head1 DESCRIPTION

This script boots the NOVA system either in qemu or on a real
hardware. The operation is controlled by a scrit which determines the
binaries to load and their parameters. See below for the syntax.

=over 4

=item -a, --append=<parameters>

    Appends a string to the root task's command line.

=item --dump-config

    Dumps current configuration to stdout end exits. Useful as an
    initial template for a config file.

=item -g, --grub[=<filename>]

    Generate grub menu file. If the file name is not specified,
    menu.lst is used. The file name is relative to NUL build
    directory.

=item -h, --help

    Print short (-h) or long (--help) help.

=item -q, --qemu_flags=<flags>

    Use other qemu flags than are the default, i.e. "-cpu coreduo -smp 2".

=item --server[=[user@]server:path]

    Copy all files needed for booting to a server (implies -g).

=item -s, --serial[=device]

    Use serial line to boot (and reset) the test machine. Implies
    --server. The default value is /dev/ttyUSB0.

=back

=head1 NOVA BOOT SCRIPT SYNTAX

The syntax tries to mimic POSIX shell syntax. All file names in the
script are relative to the NUL build directory (see below).

Lines starting with "#" are ignored.

Lines that end with "\" is contatenated with the following line
after removal of the final "\".

Lines matching '[A-Z_]+=' regexp assign values to internal variables.
See VARIABLES section.

First word on a line represents the module to load, the remaining
words are its command line parameters.

When the line ends with "<<WORD" then the subsequent lines until the
line containing only WORD are copied literally to the file named on
that line.

Example:
  #!/usr/bin/env novaboot
  WVDESC=Example program
  nul/bin/apps/sigma0.nul S0_DEFAULT script_start:1,1 \
    verbose hostkeyb:0,0x60,1,12,2
  nul/bin/apps/hello.nul
  hello.nulconfig <<EOF
  sigma0::mem:16 name::/s0/log name::/s0/timer name::/s0/fs/rom ||
  rom://nul/bin/apps/hello.nul
  EOF

This example will load three modules: sigma0.nul, hello.nul and
hello.nulconfig. sigma0 get some command line parameters and
hello.nulconfig file is generated on the fly from the lines between
<<EOF and EOF.

=head2 VARIABLES

=over 4

=item WVDESC Description of the wvtest-compliant program.
=item QEMU_FLAGS Use specific qemu flags (can be overriden by -q).

=back

=head1 CONFIGURATION FILE

novaboot can read configuration from ~/.novaboot. It is a file with
perl syntax, which sets values to certain variables. The current
configuration can be dumped with --dump-config switch. Use

    novaboot --dumpconfig > ~/.novaboot

to create a default config file and modify if to your needs. Some
configuration variables can be overriden by environment variables (see
below).

=head1 ENVIRONMENT VARIABLES

Some options can be specified not only via config file or command line
but also through environment variables. Environment overrides the
configuration file and command line parameters override the
environment.

=over 4

=item NOVABOOT_ROOT

    The NUL build directory. Defaults to $HOME/deve/nul/build.

=item NOVABOOT_HYPERVISOR

    The hypervisor binary to use. Defaults to bin/apps/hypervisor.

=item NOVABOOT_QEMU_FLAGS

    Additional flags to pass to qemu

=back

=cut

# TODO: Allow specification of qemu parameters in config file



use Getopt::Long;
use Pod::Usage;
use File::Basename;

# Get configuration
$CFG::builddir = $ENV{'HOME'}."/devel/nul/build";
$CFG::hypervisor = "bin/apps/hypervisor";
$CFG::server = "os.inf.tu-dresden.de:boot/novaboot";
$CFG::server_grub_prefix = "(nd)/tftpboot/sojka/novaboot/";

my $qemu_flags = "-cpu coreduo -smp 2";

my $cfg = $ENV{'HOME'}."/.novaboot";
if (-f $cfg) {
    package CFG; # Put config data into a separate namespace
    my $rc = do($cfg);
    
    # Check for errors
    if ($@) {
	die("ERROR: Failure compiling '$file' - $@");
    } elsif (! defined($rc)) {
	die("ERROR: Failure reading '$file' - $!");
    } elsif (! $rc) {
	die("ERROR: Failure processing '$file'");
    }
}

{ # Override config from environment
    my $v;
    if ($v = $ENV{'NOVABOOT_ROOT'}) {$CFG::builddir = $v;}
    if ($v = $ENV{'NOVABOOT_HYPERVISOR'}) { $CFG::hypervisor = $v;}
    if ($v = $ENV{'NOVABOOT_QEMU_FLAGS'}) { $qemu_flags = $v;}
}


my $config_name = $ARGV[0] || "Unknown";
my %configs;
my %variables;
my @modules = ();
my $file;
my $line;
my $EOF;

# Command line 
my ($append, $dump_config, $grub_config, $help, $man, $qemu_flags_cmd, $serial, $server);

GetOptions (
    "append|a=s"     => \$append,
    "dump-config"    => \$dump_config,
    "grub|g:s" 	     => \$grub_config,
    "qemu_flags|q=s" => \$qemu_flags_cmd,
    "serial|s:s"     => \$serial,
    "server:s" 	     => \$server,
    "h" 	     => \$help,
    "help" 	     => \$man,
    ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($server) { $CFG::server = $server; }

if ($dump_config) {
    print "\
\$builddir = '$CFG::builddir';
\$hypervisor = '$CFG::hypervisor';
\$server = '$CFG::server';
\$server_grub_prefix = '$CFG::server_grub_prefix';
";
    exit;
}

if (defined $serial) {
    $serial = $serial || "/dev/ttyUSB0";
    $server = '';
}
$grub_config = '' if (defined $server && !defined $grub_config);

if (defined $grub_config) {
    $grub_config = $grub_config || "menu.lst";
}

my $filename=$ARGV[0];

# Parse the config
while (<>) {
    chomp();
    next if /^#/ || /^\s*$/;	# Skip comments and empty lines
    if (/^([A-Z_]+)=(.*)$/) {	# Internal variable
	$variables{$1} = $2;
	next;
    }
    if (/^([^ ]*)(.*)<<([^ ]*)$/) { # Heredoc start
	push @modules, "$1$2";
	$file = [];
	$configs{$1} = $file;
	$EOF = $3;
	next;
    }
    if ($file && $_ eq $EOF) {	# Heredoc end
	undef $file;
	next;
    }
    if ($file) {		# Heredoc content
	push @{$file}, "$_\n";
	next;
    }
    if (/\\$/) {		# Line continuation
	$line .= substr($_, 0, length($_)-1);
	next;
    }

    $line .= $_;
    $line .= " $append" if ($append && scalar(@modules) == 0);
    push @modules, $line;
    $line = '';
}

chdir($CFG::builddir);
print "novaboot: Entering directory `$CFG::builddir'\n";

# always flush
$| = 1;

sub generate_grub_config($$$@)
{
    my ($filename, $allinroot, $base, @modules) = @_;
    open(my $fg, '>', $filename);
    print $fg "title $config_name\n";
    if ($allinroot) {
	print $fg "kernel ${base}hypervisor serial\n";
    } else {
	print $fg "kernel ${base}contrib/nova/build/hypervisor serial\n"; # TODO: Obey $NOVABOOTHYPERVISOR
    }
    foreach (@modules) {
	s|[^ ]*/|| if ($allinroot);
	print $fg "module $base$_\n";
    }
    # Generate configs
    foreach my $fn(keys %configs) {
	$config = $configs{$fn};
	open(my $f, '>', $fn);
	foreach (@{$config}) {
	    if (m|^rom://|) {
		s|rom://.*/(.*)|rom://$1| if ($allinroot);
		s|rom://(.*)|rom://$base$1|;
	    }
	    print $f "$_";
	}
	close($f);
    }
}

if ($variables{WVDESC}) {
    print "Testing \"$variables{WVDESC}\" in $filename:\n";
} elsif ($filename =~ /\.wv$/) {
    print "Testing \"all\" in $filename:\n";
}

if ($grub_config) {
    generate_grub_config($grub_config,
			 defined $server ? 1 : 0,
			 defined $server ? $CFG::server_grub_prefix : "",
			 @modules);
}

my $run_qemu = 1;
if (defined $server) {
    $run_qemu = 0;
    my $gc = $grub_config || '';
    system("scp -p -r $gc $CFG::hypervisor " .
	   join(" ", map({ ($file) = m/([^ ]*)/; $file; } @modules)) .
	   " $CFG::server");
#     foreach (($CFG::hypervisor, $gc, @modules)) {
# 	(my $src) = m/([^ ]*)/;
# 	(my $x,$path,) = fileparse($src,"");
# 	system("ssh os mkdir -p boot/$path") if ($path);
#         system("scp -p -r $src os:boot/$src");
#     }
}

if ($serial) {
    # TODO: Reset the connected machine
    system("stty -F $serial  115200");
    open(my $fh, "+<", $serial) || die;
    while (<$fh>) {
	print;
	if (/Press any key to continue/) { print $fh "\n"; last; }
    }
    foreach ("/wvtest\n\n") {
	print $fh $_;
	sleep(0.05);
    }
    sleep(1);
    print $fh "\n";
    while (<$fh>) {
	print;
    }
    exit;    
}

if ($run_qemu) {
    # Escape commas for qemu (requires patched qemu)
    foreach (@modules) {s/,/,,/g;}
   
    # Generate configs
    foreach my $fn(keys %configs) {
	$config = $configs{$fn};
	open(my $f, '>', $fn);
	map { print $f "$_"; } @{$config};
	close($f);
    }

    my $initrd = join ",", @modules;

    $qemu_flags = $variables{QEMU_FLAGS} if $variables{QEMU_FLAGS};
    $qemu_flags = $qemu_flags_cmd if $qemu_flags_cmd;

    if (!$ENV{'WVTESTRUN'}) {
	exec "qemu -name '$config_name' -serial stdio -kernel $CFG::hypervisor -append 'serial' -initrd \"$initrd\" $qemu_flags"
    } else {
	# We must use pipe and cat to get qemu's serial output to
	# stdout. Qemu's stdio backend cannot be used here as it
	# accesses terminal which is not allowed when we are executing
	# under wvtestrun because we are not the controlling process
	# of the terminal.
	use POSIX qw(mkfifo);
	mkfifo("tmppipe.in", 0600) unless (-p "tmppipe.in");
	mkfifo("tmppipe.out", 0600) unless (-p "tmppipe.out");
	system("cat tmppipe.out &");
	exec "qemu -name '$config_name' -chardev pipe,id=mypipe,path=tmppipe -serial chardev:mypipe -kernel $CFG::hypervisor -append 'serial' -initrd \"$initrd\" $qemu_flags";
    }
}
